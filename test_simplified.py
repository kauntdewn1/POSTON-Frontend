#!/usr/bin/env python3
"""
Teste do sistema simplificado do POST√òN Space
Verifica se a complexidade desnecess√°ria foi removida
"""

import asyncio
import aiohttp
import json

API_BASE = "http://localhost:7860"

async def test_simplified_system():
    """Testa se o sistema foi simplificado corretamente"""
    print("üß™ Testando sistema simplificado do POST√òN Space")
    print("=" * 60)
    
    # Teste 1: Health check deve retornar informa√ß√µes claras
    print("\n1. Testando Health Check...")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE}/api/health") as response:
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ Health Check: OK")
                    print(f"   Status: {data.get('status')}")
                    print(f"   Servi√ßos: {data.get('services', {})}")
                else:
                    print(f"‚ùå Health Check: Falhou ({response.status})")
                    return False
    except Exception as e:
        print(f"‚ùå Health Check: Erro de conex√£o - {e}")
        return False
    
    # Teste 2: Posts devem retornar fallback simples quando HF falha
    print("\n2. Testando Gera√ß√£o de Posts (fallback)...")
    try:
        payload = {"prompt": "teste simplificado"}
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_BASE}/api/posts",
                json=payload,
                headers={"Content-Type": "application/json"}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ Posts: OK")
                    print(f"   Modelo: {data.get('model')}")
                    result = data.get('result', '')
                    print(f"   Resultado: {result[:100]}...")
                    
                    # Verificar se n√£o tem mensagens enganosas
                    if "trevas" in result.lower() or "possu√≠do" in result.lower():
                        print("‚ùå Ainda cont√©m mensagens enganosas!")
                        return False
                    else:
                        print("‚úÖ Sem mensagens enganosas")
                else:
                    print(f"‚ùå Posts: Falhou ({response.status})")
                    return False
    except Exception as e:
        print(f"‚ùå Posts: Erro de conex√£o - {e}")
        return False
    
    # Teste 3: Imagem deve retornar fallback simples
    print("\n3. Testando Gera√ß√£o de Imagem (fallback)...")
    try:
        payload = {
            "prompt": "teste simplificado",
            "category": "SOCIAL"
        }
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_BASE}/api/image",
                json=payload,
                headers={"Content-Type": "application/json"}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ Imagem: OK")
                    print(f"   Modelo: {data.get('model')}")
                    print(f"   Cache: {data.get('cached')}")
                    
                    # Verificar se √© uma imagem v√°lida
                    image_data = data.get('image', '')
                    if image_data.startswith('data:image/'):
                        print("‚úÖ Imagem v√°lida gerada")
                    else:
                        print("‚ùå Imagem inv√°lida")
                        return False
                else:
                    print(f"‚ùå Imagem: Falhou ({response.status})")
                    return False
    except Exception as e:
        print(f"‚ùå Imagem: Erro de conex√£o - {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ TODOS OS TESTES PASSARAM!")
    print("‚úÖ Sistema simplificado funcionando corretamente")
    print("‚úÖ Complexidade desnecess√°ria removida")
    print("‚úÖ Fallbacks funcionais implementados")
    print("‚úÖ Mensagens diretas e √∫teis")
    
    return True

async def main():
    """Executa o teste"""
    try:
        success = await test_simplified_system()
        if success:
            print("\nüèÜ SISTEMA SIMPLIFICADO COM SUCESSO!")
            return 0
        else:
            print("\n‚ö†Ô∏è Alguns testes falharam")
            return 1
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Teste interrompido")
        return 1

if __name__ == "__main__":
    import sys
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
