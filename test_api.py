#!/usr/bin/env python3
"""
Teste da API consolidada do POST√òN Space
Verifica se todos os endpoints est√£o funcionando corretamente
"""

import asyncio
import aiohttp
import json
import sys

API_BASE = "http://localhost:7860"

async def test_health():
    """Testa o endpoint de health check"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_BASE}/api/health") as response:
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ Health Check: OK")
                    print(f"   Status: {data.get('status')}")
                    print(f"   Cache: {data.get('services', {}).get('cache_size', 0)} imagens")
                    return True
                else:
                    print(f"‚ùå Health Check: Falhou ({response.status})")
                    return False
    except Exception as e:
        print(f"‚ùå Health Check: Erro de conex√£o - {e}")
        return False

async def test_posts():
    """Testa o endpoint de gera√ß√£o de posts"""
    try:
        payload = {"prompt": "inova√ß√£o tecnol√≥gica"}
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_BASE}/api/posts",
                json=payload,
                headers={"Content-Type": "application/json"}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ Posts: OK")
                    print(f"   Modelo: {data.get('model')}")
                    print(f"   Resultado: {data.get('result', '')[:100]}...")
                    return True
                else:
                    print(f"‚ùå Posts: Falhou ({response.status})")
                    error_text = await response.text()
                    print(f"   Erro: {error_text}")
                    return False
    except Exception as e:
        print(f"‚ùå Posts: Erro de conex√£o - {e}")
        return False

async def test_image():
    """Testa o endpoint de gera√ß√£o de imagem"""
    try:
        payload = {
            "prompt": "futuro da intelig√™ncia artificial",
            "category": "SOCIAL"
        }
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_BASE}/api/image",
                json=payload,
                headers={"Content-Type": "application/json"}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ Imagem: OK")
                    print(f"   Modelo: {data.get('model')}")
                    print(f"   Cache: {data.get('cached')}")
                    print(f"   Tamanho: {len(data.get('image', ''))} caracteres")
                    return True
                else:
                    print(f"‚ùå Imagem: Falhou ({response.status})")
                    error_text = await response.text()
                    print(f"   Erro: {error_text}")
                    return False
    except Exception as e:
        print(f"‚ùå Imagem: Erro de conex√£o - {e}")
        return False

async def test_stop():
    """Testa o endpoint de parar gera√ß√£o"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_BASE}/api/stop",
                json={},
                headers={"Content-Type": "application/json"}
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print("‚úÖ Stop: OK")
                    print(f"   Sucesso: {data.get('success')}")
                    return True
                else:
                    print(f"‚ùå Stop: Falhou ({response.status})")
                    return False
    except Exception as e:
        print(f"‚ùå Stop: Erro de conex√£o - {e}")
        return False

async def main():
    """Executa todos os testes"""
    print("üß™ Testando API consolidada do POST√òN Space")
    print("=" * 50)
    
    tests = [
        ("Health Check", test_health),
        ("Gera√ß√£o de Posts", test_posts),
        ("Gera√ß√£o de Imagem", test_image),
        ("Parar Gera√ß√£o", test_stop)
    ]
    
    results = []
    for name, test_func in tests:
        print(f"\nüîç Testando: {name}")
        result = await test_func()
        results.append((name, result))
    
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES")
    print("=" * 50)
    
    passed = 0
    for name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ Resultado: {passed}/{len(tests)} testes passaram")
    
    if passed == len(tests):
        print("üéâ Todos os testes passaram! API consolidada funcionando perfeitamente.")
        return 0
    else:
        print("‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima.")
        return 1

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Teste interrompido pelo usu√°rio")
        sys.exit(1)
